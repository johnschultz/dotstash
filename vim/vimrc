" TODO
" https://github.com/claytron/dotfiles/blob/master/.vimrc
" http://sontek.net/turning-vim-into-a-modern-python-ide
" http://vimcasts.org/episodes/using-the-changelist-and-jumplist/
" http://vimdoc.sourceforge.net/htmldoc/quickfix.html
" http://vimzone.pixelblaster.ro/
" https://github.com/blueyed/dotfiles
"
set nocompatible       " Use Vim defaults instead of 100% vi compatibility
filetype off
set runtimepath+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'ekalinin/Dockerfile.vim'
" \\w to move quickly between words
Plugin 'Lokaltog/vim-easymotion'
" Helps by adding closing quotes and such
Plugin 'Raimondi/delimitMate'
" Bar on the bottom
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Elixir
Plugin 'elixir-lang/vim-elixir'
Plugin 'slashmili/alchemist.vim'
" Go support. Use :GoInstallBinaries
Plugin 'myitcv/govim'
" Plugin 'fatih/vim-go'
" Seems unupdated, should consider changing
Plugin 'gmarik/Vundle.vim'
" Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'kien/rainbow_parentheses.vim'
" Python autocomplete
Plugin 'davidhalter/jedi-vim'
Plugin 'nvie/vim-pep8'
Plugin 'leshill/vim-json'
" Visual guide to indentation
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'scrooloose/nerdtree'
" Plugin 'scrooloose/syntastic'
Plugin 'neomake/neomake'

Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-rsi'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-haml'
" Rust Plugins
Plugin 'racer-rust/vim-racer'
Plugin 'rust-lang/rust.vim'
" Plugin 'suan/vim-instant-markdown'
" Plugin 'shime/vim-livedown'
Plugin 'parkr/vim-jekyll'

call vundle#end()

" Show line indent guide
filetype plugin indent on  " Enables filetype specific stuff
let g:indent_guides_enable_on_vim_startup = 1

" When writing a buffer (no delay).
" call neomake#configure#automake('w')
" When writing a buffer (no delay), and on normal mode changes (after 750ms).
call neomake#configure#automake('nw', 750)
" When reading a buffer (after 1s), and when writing (no delay).
" call neomake#configure#automake('rw', 1000)
" Full config: when writing or reading a buffer, and on changes in insert and
" normal mode (after 1s; no delay when writing).
" call neomake#configure#automake('nrwi', 500)

set nu                 " Enable line numbers
set autoindent         " Auto indent new lines
set smartindent        " Make autoindent smarter
set smarttab           " Proper indenting with <Tab>
set autowrite          " Automatically save before commands like :next and :make
set backspace=indent,eol,start " more powerful backspacing
set cursorline         " Highlight current line
set foldmethod=indent
set foldlevel=99
set hidden             " Hide buffers when they are abandoned
set history=50         " keep 50 lines of command line history
set ignorecase         " Wait for smartcase...
set smartcase          " Do smart case matching when searching
set incsearch          " Incremental search
set hlsearch           " Highlight search results
set list               " Show invisibles
set listchars=tab:▸\ ,eol:¬
set mouse=a            " Enable mouse usage (all modes) in terminals
set ruler              " show the cursor position all the time
set scrolloff=3        " Never lean to the top or bottom of the window
set showcmd            " Show (partial) command in status line.
set showmatch          " Show matching brackets.
set softtabstop=4 tabstop=4 shiftwidth=4 expandtab " Default whitespace settings
set viminfo='20,\"50   " read/write a .viminfo file, don't store more than 50 lines of registers
set wildmenu           " Enhanced command-line completion.
set wildmode=list:longest " Show all alternatives and complete furtherest possible.
set completeopt=menuone,longest,preview " Better completion menu
set backupdir=~/.vim/backup
" To get hover working in the terminal we need to set ttymouse. See
"
" :help ttymouse
"
" for the appropriate setting for your terminal. Note that despite the
" automated tests using xterm as the terminal, a setting of ttymouse=xterm
" does not work correctly beyond a certain column number (citation needed)
" hence we use ttymouse=sgr
set ttymouse=sgr

" Suggestion: By default, govim populates the quickfix window with diagnostics
" reported by gopls after a period of inactivity, the time period being
" defined by updatetime (help updatetime). Here we suggest a short updatetime
" time in order that govim/Vim are more responsive/IDE-like
set updatetime=500

" Suggestion: To make govim/Vim more responsive/IDE-like, we suggest a short
" balloondelay
set balloondelay=250

set directory=~/.vim/backup
if version >= 703
    set colorcolumn=80     " Vertical line on column 80
    set undofile           " Persistent undo history
    set undodir=~/.vim/backup
endif
let g:racer_cmd = "/home/user/.cargo/bin/racer"  " Rust racer
let g:racer_experimental_completer = 1
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)


au FocusLost * silent! wall
set clipboard=unnamed " Share paste buffers with OS.

set background=dark
colorscheme darkblue

highlight WrongWhitespace ctermbg=red guibg=red
call matchadd('WrongWhitespace', '^ \+\t\+')
call matchadd('WrongWhitespace', '\s\+$')
autocmd ColorScheme * highlight WrongWhitespace ctermbg=red guibg=red

" This was causing too many diffs on undisciplined repositories
autocmd BufWritePre * :%s/\s\+$//e

if !exists("syntax_on")
  syntax on " Use syntax highlighting
endif

nnoremap <leader>g :GundoToggle<CR>
let g:gundo_close_on_revert = 1

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.pyo,.pyc,.rbc

nnoremap <leader>n :NERDTreeToggle<CR>
let NERDTreeIgnore = []
for suffix in split(&suffixes, ',')
    let NERDTreeIgnore += [ escape(suffix, '.~$') . '$' ]
endfor
let NERDTreeMinimalUI=1

" Retore last edit location when opening a file
autocmd BufReadPost * if line("'\"") > 0 && line ("'\"") <= line("$") | exe "normal g'\"" | exe "normal zz" | endif

let g:pyflakes_use_quickfix = 0

set laststatus=2

" Highlight space errors in C/C++ source files (Vim tip #935)
let c_space_errors=1

" Como sugerido pelo Ademar, como implementado neste url
au FileType ruby setlocal expandtab tabstop=2 shiftwidth=2

" We know xterm-debian is a color terminal
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
  set t_Co=16
  set t_Sf=^[[3%dm
  set t_Sb=^[[4%dm
endif

" My pinky finger is never fast enough.
command! W w
command! Q q
command! Wq wq

" Select pasted text
nnoremap gp `[v`]`

let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'

" Syntastic is too slow on cucumber
let g:syntastic_mode_map = { 'mode': 'active',
            \ 'passive_filetypes': ['cucumber'] }

let g:syntastic_python_checkers = ['frosted', 'pylama', 'mypy', 'pep257', 'pyflakes', 'flake8', 'py3kwarn', 'prospector', 'python']

nnoremap <leader>c :bwipeout<CR>

let g:ctrlp_match_window = ''
let g:ctrlp_max_files = ''
let g:ctrlp_max_depth=40

