"" Call pathogen before everything else.
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

filetype on        " enables filetype detection
filetype plugin on " enables filetype specific plugins

source $HOME/.vim/pkoch/autohighlight.vim
source $HOME/.vim/pkoch/python.vim

nnoremap <leader>g :GundoToggle<CR>

nnoremap <leader>n :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWritePre * :%s/\s\+$//e

let macvim_hig_shift_movement = 1

set background=dark
colorscheme solarized
let g:solarized_contrast="high"

nnoremap <leader>t :TlistToggle<CR>

""""""""  wyw.dcweb.cn/vim/.vimrc.html  """"""""
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P ""Eu não percebo bem o q isto faz, mas ok

"" Navegação ao longo dos erros
nmap <F1> :cp<CR>
nmap <F2> :cn<CR>

" Highlight space errors in C/C++ source files (Vim tip #935)
let c_space_errors=1

" Defaults
set expandtab
set smarttab
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set foldmethod=syntax
let python_highlight_all=1

" Como sugerido pelo Ademar, como implementado neste url
au FileType ruby setlocal expandtab tabstop=2 shiftwidth=2

"""""""""""""""""  debian.vim  """""""""""""""""
set nocompatible      " Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start        " more powerful backspacing

" Now we set some defaults for the editor
set autoindent        " always set autoindenting on
" set linebreak         " Don't wrap words by default
set textwidth=0       " Don't wrap lines by default
set viminfo='20,\"50  " read/write a .viminfo file, don't store more than
                      " 50 lines of registers
set history=50        " keep 50 lines of command line history
set ruler             " show the cursor position all the time

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

if has("autocmd")
 " Enabled file type detection
 " Use the default filetype settings. If you also want to load indent files
 " to automatically do language-dependent indenting add 'indent' as well.
 filetype plugin on
 filetype indent on
 autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/
endif " has ("autocmd")

" We know xterm-debian is a color terminal
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
  set t_Co=16
  set t_Sf=^[[3%dm
  set t_Sb=^[[4%dm
endif
"""""""""""""""""  vimrc  """""""""""""""""
syntax on
syntax enable
let g:load_doxygen_syntax=1

if has("autocmd")
   au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

set showcmd            " Show (partial) command in status line.
set showmatch          " Show matching brackets.
set ignorecase         " Do case insensitive matching
set smartcase          " Do smart case matching
set incsearch          " Incremental search
set autowrite          " Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
set mouse=a            " Enable mouse usage (all modes) in terminals


"" Tabs
map <SPACE> <C-w><C-w>
nmap <tab> :tabn<CR>
nmap <S-tab> :tabp<CR>
nmap <C-tab> :tabnew<CR>
nmap <C-S-tab> :tabclose<CR>

command W w
command Q q
command Wq wq

autocmd BufWinEnter *.rb TwoSpaceTabs
set smartindent
function! OutlineToggle()
	if (! exists ("b:outline_mode"))
		let b:outline_mode = 0
	endif

	if (b:outline_mode == 0)
		syn region myFold start="{" end="}" transparent fold
		syn sync fromstart
		set foldmethod=syntax

		silent! exec "%s/{{{/<<</"
		silent! exec "%s/}}}/>>>/"

		let b:outline_mode = 1
	else
		set foldmethod=marker

		silent! exec "%s/<<</{{{/"
		silent! exec "%s/>>>/}}}/"

		let b:outline_mode = 0
	endif
endfunction

" Stolen from https://github.com/carlhuda/janus/blob/master/vimrc
" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

