# Follows standards set in https://www.conventionalcommits.org/en/v1.0.0/
# <type>: (If applied, this commit will...) <subject> (Max 50 char)
# |<----  Using a Maximum Of 50 Characters  ---->|


# Body (Optional)
# Explain why this change is being made, not how
# |<----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|


# Footer (Optional)
# Provide links or keys to any relevant tickets, articles or other resources
# If change is breaking add BREAKING CHANGE in footer.
# BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a !
# after the type/scope, introduces a breaking API change (correlating with MAJOR
# in semantic versioning). A BREAKING CHANGE can be part of commits of any type.
# Example: issue https://issues.amazon.com/KEYSTONEDEV-23 BREAKING CHANGE!


# --- COMMIT END ---
# Type can be
# feat: addition of some new features
# add: changes to add new capability or functions
# cut: removing the capability or functions
# fix: a bug fix
# bump: increasing the versions or dependency versions
# build: changes to build system or external dependencies
# make: change to the build process, or tooling, or infra
# ci: changes to CI configuration files and scripts
# doc: changes to the documentation
# test: adding missing tests or correcting existing tests
# chore: changes for housekeeping (avoiding this will force more meaningful message)
# refactor: a code change that neither fixes a bug nor adds a feature
# style: changes to the code that do not affect the meaning
# optimize/perf: a code change that improves performance
# revert: reverting an accidental commit
# --------------------
# Remember to
#   - Must not capitalize the first letter
#   - Use the imperative mood in the subject line
#   - Do not end the subject line with a period
#   - Separate subject from body with a blank line
#   - Use the body to explain what and why vs. how
#   - Can use multiple lines with "-" for bullet points in body
# --------------------
#
#
